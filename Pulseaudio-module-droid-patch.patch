--- a/src/modules/droid/droid-sink.c
+++ b/src/modules/droid/droid-sink.c
@@ -98,6 +98,7 @@
     pa_hook_slot *sink_input_unlink_hook_slot;
     pa_hook_slot *sink_proplist_changed_hook_slot;
     pa_hashmap *parameters;
+    pa_hashmap *card_parameters;
 
     pa_droid_card_data *card_data;
     pa_droid_hw_module *hw_module;
@@ -113,8 +114,9 @@
 
 #define DEFAULT_MODULE_ID "primary"
 
-/* sink properties */
+/* sink properties & card properties */
 #define PROP_DROID_PARAMETER_PREFIX "droid.parameter."
+#define PROP_DROID_CARD_PARAMETER_PREFIX "droid.card_parameter."
 typedef struct droid_parameter_mapping {
     char *key;
     char *value;
@@ -936,6 +938,7 @@
     const char *key;
     const char *value;
     char *tmp;
+    char *card_param_temp = NULL;
     void *state = NULL;
     droid_parameter_mapping *parameter = NULL;
 
@@ -946,41 +949,82 @@
         return PA_HOOK_OK;
 
     while ((key = pa_proplist_iterate(sink->proplist, &state))) {
-        if (!pa_startswith(key, PROP_DROID_PARAMETER_PREFIX))
-            continue;
-
-        pkey = key + strlen(PROP_DROID_PARAMETER_PREFIX);
-        if (pkey[0] == '\0')
-            continue;
-
-        changed = false;
+        if (pa_startswith(key, PROP_DROID_PARAMETER_PREFIX)) {
+            pkey = key + strlen(PROP_DROID_PARAMETER_PREFIX);
+            if (pkey[0] == '\0')
+                continue;
+
+            changed = false;
+
+            if (!(parameter = pa_hashmap_get(u->parameters, pkey))) {
+                parameter = pa_xnew0(droid_parameter_mapping, 1);
+                parameter->key = pa_xstrdup(pkey);
+                parameter->value = pa_xstrdup(pa_proplist_gets(sink->proplist, key));
+                pa_hashmap_put(u->parameters, parameter->key, parameter);
+                changed = true;
+            } else {
+                value = pa_proplist_gets(sink->proplist, key);
+                if (!pa_streq(parameter->value, value)) {
+                    pa_xfree(parameter->value);
+                    parameter->value = pa_xstrdup(value);
+                    changed = true;
+                }
+            }
 
-        if (!(parameter = pa_hashmap_get(u->parameters, pkey))) {
-            parameter = pa_xnew0(droid_parameter_mapping, 1);
-            parameter->key = pa_xstrdup(pkey);
-            parameter->value = pa_xstrdup(pa_proplist_gets(sink->proplist, key));
-            pa_hashmap_put(u->parameters, parameter->key, parameter);
-            changed = true;
-        } else {
-            value = pa_proplist_gets(sink->proplist, key);
-            if (!pa_streq(parameter->value, value)) {
-                pa_xfree(parameter->value);
-                parameter->value = pa_xstrdup(value);
+            if (changed) {
+                pa_assert(parameter);
+                tmp = pa_sprintf_malloc("%s=%s;", parameter->key, parameter->value);
+                pa_log_debug("sink proplist changed: set_parameters(): %s", tmp);
+                pa_droid_hw_module_lock(u->hw_module);
+                u->stream_out->common.set_parameters(&u->stream_out->common, tmp);
+                pa_droid_hw_module_unlock(u->hw_module);
+                pa_xfree(tmp);
+            }
+        } else if (pa_startswith(key, PROP_DROID_CARD_PARAMETER_PREFIX)) {
+            pkey = key + strlen(PROP_DROID_CARD_PARAMETER_PREFIX);
+            if (pkey[0] == '\0')
+                continue;
+
+            changed = false;
+
+            if (!(parameter = pa_hashmap_get(u->card_parameters, pkey))) {
+                parameter = pa_xnew0(droid_parameter_mapping, 1);
+                parameter->key = pa_xstrdup(pkey);
+                parameter->value = pa_xstrdup(pa_proplist_gets(sink->proplist, key));
+                pa_hashmap_put(u->card_parameters, parameter->key, parameter);
                 changed = true;
+            } else {
+                value = pa_proplist_gets(sink->proplist, key);
+                if (!pa_streq(parameter->value, value)) {
+                    pa_xfree(parameter->value);
+                    parameter->value = pa_xstrdup(value);
+                    changed = true;
+                }
             }
-        }
 
-        if (changed) {
-            pa_assert(parameter);
-            tmp = pa_sprintf_malloc("%s=%s;", parameter->key, parameter->value);
-            pa_log_debug("sink proplist changed: set_parameters(): %s", tmp);
-            pa_droid_hw_module_lock(u->hw_module);
-            u->stream_out->common.set_parameters(&u->stream_out->common, tmp);
-            pa_droid_hw_module_unlock(u->hw_module);
-            pa_xfree(tmp);
+            if (changed) {
+                pa_assert(parameter);
+                if (!card_param_temp) {
+                    card_param_temp = pa_sprintf_malloc("%s=%s;", parameter->key, parameter->value);
+                } else {
+                    tmp = pa_sprintf_malloc("%s%s=%s;", card_param_temp, parameter->key, parameter->value);
+                    pa_xfree(card_param_temp);
+                    card_param_temp = tmp;
+                }
+            }
         }
     }
 
+    if (card_param_temp != NULL) {
+        pa_log_debug("card proplist changed: set_parameters(): %s", card_param_temp);
+
+        pa_droid_hw_module_lock(u->hw_module);
+        u->card_data->set_parameters(u->card_data, card_param_temp);
+        pa_droid_hw_module_unlock(u->hw_module);
+
+        pa_xfree(card_param_temp);
+    }
+
     return PA_HOOK_OK;
 }
 
@@ -1098,6 +1142,7 @@
     u->rtpoll = pa_rtpoll_new();
     pa_thread_mq_init(&u->thread_mq, m->core->mainloop, u->rtpoll);
     u->parameters = pa_hashmap_new_full(pa_idxset_string_hash_func, pa_idxset_string_compare_func, NULL, (pa_free_cb_t) parameter_free);
+    u->card_parameters = pa_hashmap_new_full(pa_idxset_string_hash_func, pa_idxset_string_compare_func, NULL, (pa_free_cb_t) parameter_free);
     u->voice_volume_call_mode = voice_volume_call_mode;
     u->voice_virtual_stream = voice_virtual_stream;
     u->voice_property_key   = pa_xstrdup(pa_modargs_get_value(ma, "voice_property_key", DEFAULT_VOICE_CONTROL_PROPERTY_KEY));
@@ -1367,6 +1412,9 @@
     if (u->parameters)
         pa_hashmap_free(u->parameters);
 
+    if (u->card_parameters)
+        pa_hashmap_free(u->card_parameters);
+
     if (u->hw_module && u->stream_out) {
         pa_droid_hw_module_lock(u->hw_module);
         u->hw_module->device->close_output_stream(u->hw_module->device, u->stream_out);
